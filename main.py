from dotenv import load_dotenv
load_dotenv()

from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import logging
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ (–≤–∞—à –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
MOTIVATIONAL_PHRASES = []
QUOTES_FILE = "quotes.txt"

def load_quotes(filename):
    phrases = []
    try:
        with open(filename, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if line:
                    phrases.append(line)
    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filename}': {e}")
        return []
    
    if not phrases:
        logging.warning(f"–§–∞–π–ª —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ '{filename}' –ø—É—Å—Ç.")
        phrases = [
            "–ï—Å–ª–∏ –Ω–µ—Ç –≤–µ—Ç—Ä–∞, –±–µ—Ä–∏—Å—å –∑–∞ –≤–µ—Å–ª–∞.",
            "–î–∞–∂–µ —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞."
        ]
    return phrases

MOTIVATIONAL_PHRASES = load_quotes(QUOTES_FILE)

# –í–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
     await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò—Ä–∏–Ω–∞ –ù–µ—á–∏—Ç–∞–π–ª–æ, –∏ —è —Ç–≤–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –≥—É—Ä—É. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /quote, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∞–≤—Ç–æ—Ä—Å–∫–∏–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä ‚Äî —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è!",
    )

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random_quote = random.choice(MOTIVATIONAL_PHRASES)
    await update.message.reply_text(random_quote)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    await update.message.reply_text(f"–í —Å–º—ã—Å–ª–µ '{text}' üôÑ –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è, –∑–Ω–∞—á–∏—Ç –Ω–∞–ø–∏—à–∏ /quote. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏ /start üòè")

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("quote", quote))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

# –†–æ—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
@app.route('/webhook', methods=['POST'])
async def webhook():
    update = Update.de_json(request.get_json(), application.bot)
    await application.process_update(update)
    return 'ok', 200

# –ó–∞–ø—É—Å–∫ Flask + –≤–µ–±—Ö—É–∫–∞
if __name__ == '__main__':
    # –£–∫–∞–∑—ã–≤–∞–µ–º URL –≤–∞—à–µ–≥–æ Render-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ `your-bot-name` –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è)
    WEBHOOK_URL = f"https://mytestbot-bwf9.onrender.com/webhook"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await application.bot.set_webhook(WEBHOOK_URL)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ –ø–æ—Ä—Ç—É 10000 (Render —Ç—Ä–µ–±—É–µ—Ç —ç—Ç–æ—Ç –ø–æ—Ä—Ç)
    app.run(host='0.0.0.0', port=10000)