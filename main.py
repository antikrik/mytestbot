from dotenv import load_dotenv
load_dotenv()

from telegram.ext import Application, CommandHandler, MessageHandler, filters
import os
import logging
from telegram import Update # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import random # –ù–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ä–∞–Ω–¥–æ–º –¥–ª—è —Ñ—Ä–∞–∑!

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN") 
if not TOKEN:
    logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    exit(1)

MOTIVATIONAL_PHRASES = [] # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∑–∞–ø–æ–ª–Ω–∏–º –∏–∑ —Ñ–∞–π–ª–∞
QUOTES_FILE = "quotes.txt" # –ò–º—è —Ñ–∞–π–ª–∞ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑ –∏–∑ —Ñ–∞–π–ª–∞
def load_quotes(filename):
    phrases = []
    try:
        with open(filename, "r", encoding="utf-8") as f: # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
            for line in f:
                line = line.strip() # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                if line: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    phrases.append(line)
    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filename}': {e}")
        return []
    
    if not phrases: # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –±—ã–ª–∏ –ø—É—Å—Ç—ã–º–∏
        logging.warning(f"–§–∞–π–ª —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ '{filename}' –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.")
    
    return phrases

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
MOTIVATIONAL_PHRASES = load_quotes(QUOTES_FILE)

# –ï—Å–ª–∏ —Ñ—Ä–∞–∑—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –¥–æ–±–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –±—ã–ª –ø—É—Å—Ç—ã–º
if not MOTIVATIONAL_PHRASES:
    logging.warning("–§—Ä–∞–∑—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã.")
    MOTIVATIONAL_PHRASES = [
        "–ï—Å–ª–∏ –Ω–µ—Ç –≤–µ—Ç—Ä–∞, –±–µ—Ä–∏—Å—å –∑–∞ –≤–µ—Å–ª–∞. –≠—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞.",
        "–î–∞–∂–µ —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞. –≠—Ç–æ —Ç–æ–∂–µ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞."
    ]

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è —Ñ—É–Ω–∫—Ü–∏–∏ start, quote, echo –∏ main)


# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò—Ä–∏–Ω–∞ –ù–µ—á–∏—Ç–∞–π–ª–æ, –∏ —è —Ç–≤–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –≥—É—Ä—É. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /quote, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∞–≤—Ç–æ—Ä—Å–∫–∏–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä ‚Äî —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è!",
    )
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name}")

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /quote
async def quote(update: Update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É."""
    random_quote = random.choice(MOTIVATIONAL_PHRASES) # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
    await update.message.reply_text(random_quote)
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ü–∏—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.full_name}")

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ –µ–µ –∏–∑–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å)
async def echo(update: Update, context):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä—è—è –µ–≥–æ."""
    text = update.message.text
    await update.message.reply_text(f"–í —Å–º—ã—Å–ª–µ '{text}' üôÑ –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è, –∑–Ω–∞—á–∏—Ç –Ω–∞–ø–∏—à–∏ /quote. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏ /start üòè")
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.full_name}")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥.
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("quote", quote)) # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /quote

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling. –û–Ω –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    logging.info("–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
